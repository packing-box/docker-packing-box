#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from tinyscript import *
# import exeplot afterwards to avoid name clashes
from exeplot.plots import *
from exeplot.plots import __all__ as _plots
from exeplot.plots.__common__ import SUBLABELS


__script__      = "Executable manipulation tool"
__version__     = "1.2.3"
__doc__         = """
This tool aims to manipulate a single executable.
"""
__description__ = "Manipulate a single executable"
__examples__ = [
    "alter rename_sections program.exe",
    "plot --dpi 300 --format jpg program.exe",
    "show program.exe",
]


#TODO: disassemble, [readelf|readpe|readmo], fingerprint
if __name__ == '__main__':
    sparsers = parser.add_subparsers(dest="command", metavar="CMD", title="positional argument",
                                     help="command to be executed")
    alter = sparsers.add_parser("alter", help="alter the target executable with the given alteration")
    add_argument(alter, "executable", single=True)
    add_argument(alter, "alterations-set", "alteration")
    dif = sparsers.add_parser("diff", help="represent differences in information dumps between two target executables")
    add_argument(dif, "executable", single=True)
    dif.add_argument("executable2", help="another executable file")
    feat = sparsers.add_parser("features", help="compute features of the target executable")
    add_argument(feat, "executable", "features-set", single=True)
    plot = sparsers.add_parser("plot", help="plot the target executable(s)")
    plots = plot.add_subparsers(dest="type", help="plot type")
    for plot in sorted(_plots):
        plot_parser = (pf := globals()[plot]).__args__(plots.add_parser(plot, help=pf.__doc__.strip()))
        figure_options(plot_parser, add_no_title=True)
    scan = sparsers.add_parser("scan", help="send the executable to VirusTotal for scanning")
    add_argument(scan, "executable")
    scan.add_argument("executables", nargs="*", help="executable files to compare with the reference file")
    scan.add_argument("-f", "--force", action="store_true", help="remove cached data for the target executable if any")
    show = sparsers.add_parser("show", help="show information about the target executable")
    add_argument(show, "executable")
    show.add_argument("--block-entropies", action="store_true", help="show all the block entropies")
    initialize(noargs_action="usage")
    configure_logging(args.verbose)
    args.logger = logger
    # now execute
    if args.command == "features":
        Features.source = args.features_set
        Executable(args.executable, logger=logger).show(False, False, True)
    elif args.command == "plot":  #FIXME (TypeError: 'Plot' object is not callable)
            e = sorted([args.__dict__.pop(a) for a in dir(args) if a.startswith("executable")])
            if isinstance(e[0], list) and len(e) == 1:
                e = e[0]
            getattr(Executable(e[0], logger=logger).plot, args.type)(*e, **vars(args))
    else:
        getattr(Executable(args.executable), args.command)(**vars(args))
    sys.exit(0)

