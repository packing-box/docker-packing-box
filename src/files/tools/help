#!/usr/bin/python3
# -*- coding: UTF-8 -*-
from pbox import *
from tinyscript import *
from tinyscript.report import *


__banner__      = "packing-box"
__version__     = "1.2.2"
__description__ = "Display this help message or packer's help"


BANNER_ARG   = "item"
BANNER_FONT  = "starwars"
BANNER_STYLE = {'fgcolor': "lolcat"}
TEMPLATE  = """
This Docker image is a ready-to-use platform for making datasets of packed and not packed executables, especially for training machine learning models.
"""


def overview(show=False, format=None, category=None, keep=None):
    """ Display an overview of tools, detectors, packers, unpackers and datasets. """
    report, n = [Text(TEMPLATE)], 0
    if keep is None:
        tools = []
        tools_headers = ["Name", "Description", "Version"]
        for tool in ts.Path(__file__).dirname.listdir(lambda f: f.is_file()):
            row = [tool.stem, "", ""]
            try:
                for line in tool.read_text().splitlines():
                    if re.match(r"__(description|version)__", line):
                        row[[1, 2]["__version__" in line]] = line.split("=", 1)[-1].strip(" \"")
            except UnicodeDecodeError:
                continue
            if row[1]:
                tools.append(row)
        report.append(Section("Tools (%d)" % len(tools)))
        report.append(Table(tools, column_headers=tools_headers))
    descr = {}
    for cls in ([Analyzer, Detector, Packer, Unpacker] if keep is None else [globals()[keep[:-1].capitalize()]]):
        r, d = cls.summary(show, format, **({'categories': category} if cls is Packer else {}))
        if cls is Detector:
            table, cols = r[1], ["Multiclass", "Weak Mode", "Superdetector"]
            for col in cols:
                table.column_headers.insert(-1, col)
            data = []
            for row in table.data:
                dcls = Detector.get(row[0])
                bad, good = (NOK, OK) if dcls.status == "ok" else (NOK_GREY, OK_GREY)
                for col, default in [("multiclass", True), ("weak", False), ("vote", True)]:
                    row.insert(-1, [bad, good][getattr(dcls, col, default)])
                data.append(row)
            table.data = data
        for _ in r:
            report.append(_)
        descr.update(d)
    report.append(Section("Legend"))
    report.append(Text(" ; ".join("%s  %s" % (k.strip("â€ƒ"), v) for k, v in sorted(descr.items(), key=lambda x: x[1]))))
    if keep is None:
        for s in Dataset.summarize(".", args.show_all):
            report.append(s)
    return report


if __name__ == '__main__':
    valid_categories = tuple(sorted(set(c for p in Packer.registry for c in getattr(p, "categories", [])))) + ("All", )
    megs = [parser.add_mutually_exclusive_group() for _ in range(8)]
    arg_c = megs[0].add_argument("-c", "--category", choices=valid_categories, help="filter on a category of packers")
    megs[4].add_argument(arg_c)
    arg_f = megs[1].add_argument("-f", "--format", default="All", help="filter on a format of executables")
    megs[5].add_argument(arg_f)
    arg_i = megs[0].add_argument("-i", "--item", help="get help for a particular detector, packer or unpacker")
    for i in range(3): megs[1+i].add_argument(arg_i)
    arg_k = megs[2].add_argument("-k", "--keep", choices=["detectors", "packers", "unpackers"],
                                 help="only keep detectors, packers or unpackers")
    megs[6].add_argument(arg_k)
    arg_s = megs[3].add_argument("-s", "--show-all", action="store_true",
                                 help="show all packers, even those that are broken")
    megs[7].add_argument(arg_s)
    arg_y = megs[4].add_argument("-y", "--yaml", action="store_true", help="include YAML definition")
    for i in range(3): megs[5+i].add_argument(arg_y)
    initialize()
    configure_logging(args.verbose)
    if args.item is None:
        render(*overview(args.show_all, args.format, args.category, args.keep))
    else:
        subcls = None
        for cls in [Detector, Packer, Unpacker]:
            subcls = cls.get(args.item, error=False)
            if subcls:
                render(subcls.help())
                if args.yaml:
                    print("")
                    yaml, in_block = "", False
                    with open(cls.config) as f:
                        for l in f:
                            if l.split(":")[0] == subcls.cname:
                                in_block = True
                            elif in_block and l.strip() == "":
                                break
                            if l.strip() == "":
                                in_block = False
                            if in_block:
                                yaml += l
                    print(ts.txt_terminal_render(yaml.rstrip(), syntax="yaml", pad=(1, 2)))
                break
        if subcls is None:
            logger.error("%s not found" % args.item)

